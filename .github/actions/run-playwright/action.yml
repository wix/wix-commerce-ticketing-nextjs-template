name: 'Store Playwright Results'
description: 'Store Playwright Results'
inputs:
  provider-deployment-url:
    description: 'The deployment URL to test with'
    required: true
  provider:
    description: 'Which next deployment provider is used'
    required: true
  githubToken:
    description: 'GitHub Token'
    required: true
  prNumber:
    description: 'Pull request ID (optional)'
    required: false
runs:
  using: "composite"
  steps:
    - name: Run E2E Tests on Netlify URL
      id: playwright-e2e
      run: REMOTE_PROVIDER=${{ inputs.provider }} yarn e2e
      shell: bash
      env:
        PLAYWRIGHT_TEST_BASE_URL: ${{ inputs.provider-deployment-url }}
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report-${{ inputs.provider }}
        path: playwright-report/
        retention-days: 10
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenshots-${{inputs.provider}}
        path: tests/e2e/__screenshots__/${{inputs.provider}}
        retention-days: 10
    - uses: actions/github-script@v6
      if: always()
      with:
        github-token: ${{ inputs.githubToken }}
        script: |
          const conclusion = '${{ steps.playwright-e2e.outcome }}';
          const prNumber = '${{ inputs.prNumber }}';
          const provider = '${{ inputs.provider }}';
          console.log('Update status check should run: ',prNumber && conclusion, {prNumber, conclusion}); 
          console.log('Args:', {prNumber, conclusion}); 
          if (prNumber && conclusion) {
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            console.log('Update status check should run: ',prNumber && conclusion, {prNumber, conclusion});
            const jobName = context.job;
            const [checksForPr, pullRequest] = await Promise.all([
              github.rest.checks.listForRef({
                owner: owner,
                repo: repo,
                pull_number: prNumber,
              }),
              github.rest.pulls.get({
                owner,
                repo,
                pull_number: prNumber,
              }),
            ]);

            let checkRunId = null;
            for (const checkRun of checksForPr.data.check_runs) {
              if (checkRun.name === jobName) {
                checkRunId = checkRun.id;
                console.log(`Found Check Run ID: ${checkRunId}`);
                break;
              }
            }
            
            if (checkRunId) {
              const checkInput = {
                owner,
                repo,
                check_run_id: checkRunId,
                pull_request: prNumber,
                status: 'completed',
                conclusion: conclusion,
                output: {
                  title: 'e2e ${provider}',
                  summary: `Playwright E2E executed with conclusion: ${conclusion}`,
                },
              };
              github.rest.checkRuns.update(checkInput);
            }
          
            // Create a comment with the artifact links on the pull request
            const artifactLinks = [
              `E2E ${provider} results:`,
              `[Playwright Report](https://github.com/${owner}/${repo}/actions/runs/${checkInput.check_run_id}/artifacts/playwright-report-${inputs.provider})`,
              `[Screenshots](https://github.com/${owner}/${repo}/actions/runs/${checkInput.check_run_id}/artifacts/screenshots-${inputs.provider})`
            ];
            const comment = artifactLinks.join('\n');
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pullRequest.data.number,
              body: comment
            });
          }
